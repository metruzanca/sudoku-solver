{"version":3,"sources":["styles/index.ts","lib/index.ts","components/App/App.tsx","components/Cell/Cell.tsx","components/Grid/Grid.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","GridWrapper","styled","div","CellWrapper","p","horrizontalEdge","css","verticalEdge","highlight","getHighlighted","index","column","col","getColumn","row","Math","floor","getRow","square","getSquare","set","Set","Array","from","length","_","i","getNumbersInRow","forEach","item","add","start","getNumbersInSquare","values","App","useState","fill","data","highlighted","_setHighlighted","map","idx","includes","useHighlight","setHighlighted","Cell","value","onHover","cellRef","useRef","hEdge","vEdge","useEffect","cell","current","addEventListener","ref","Grid","uuid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.173ac971.chunk.js","sourcesContent":["import styled, { createGlobalStyle, css } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  :root {\n    --bgColor1: #1C1E26;\n    --bgColor2: #3C4347;\n    --textColor: #90A4AE;\n    --highlight: #2b2d39;\n    --borders: #B4435C;\n    \n    background-color: var(--bgColor1);\n    color: var(--textColor);\n  }\n  #root {\n    display: grid;\n    place-items: center;\n  }\n`\n\nexport const GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(9, auto);\n  width: min-content;\n\n  padding-top: 1em;\n  padding-left: 1em;\n\n  // Temporary\n  border: 1px solid var(--borders);\n  border-radius: .4em;\n`\n\ninterface CellWrapperProps {\n  // For grid gaps in groups of 3s\n  horrizontalEdge: boolean\n  verticalEdge: boolean\n  // For hover on cells\n  highlight: boolean\n}\n\nexport const CellWrapper = styled.div<CellWrapperProps>`\n  height: 2em;\n  width: 2em;\n  \n  ${p => p.horrizontalEdge && css`\n    margin-right: 1em;\n  `}\n  ${p => p.verticalEdge && css`\n    margin-bottom: 1em;\n  `}\n\n  ${p => p.highlight && css`\n    background-color: var(--highlight);\n  `}\n\n  // Temporary\n  border: 1px solid var(--borders);\n\n  // Center number\n  display: grid;\n  place-items: center;\n`","export function getHighlighted(index: number){\n  const col = getColumn(index)\n  const row = getRow(index)\n  const square = getSquare(index)\n  // console.log(\"Entered cell n: \" + index);\n  // console.log(\"Row \" + row);\n  // console.log(\"Column \" + col)\n  // console.log(\"Values in row: \" + getNumbersInRow(row));\n  // console.log(\"Values in column: \" + getNumbersInColumn(col));\n  // console.log(\"Values in square: \" + getNumbersInSquare(square));\n  const set = new Set<number>()\n  getNumbersInRow(row).forEach(item => set.add(item))\n  getNumbersInColumn(col).forEach(item => set.add(item))\n  getNumbersInSquare(square).forEach(item => set.add(item))\n  return Array.from(set.values())\n}\n\n/**\n * @returns 0 indexed row number\n */\nfunction getRow(index:number) {\n  return Math.floor((index) / 9)\n}\n\n\n/**\n * @returns 0 indexed column number\n */\nfunction getColumn(index: number){\n  return (index % 9)\n}\n\n\n/**\n * @returns 0 indexed square number\n */\nfunction getSquare(index: number){\n  return Math.floor((index % 9) / 3) + 3 * Math.floor(index / (9 * 3))\n}\n\n\n/**\n * @returns array of numbers in the row\n */\nfunction getNumbersInRow(row: number) : number[] {\n  return Array.from({length: 9}, (_, i) => 9 * row + i)\n}\n\n\n/**\n * @returns array of numbers in the column\n */\nfunction getNumbersInColumn(column: number) : number[] {\n  return Array.from({length: 9}, (_, i) => column + i * 9)\n}\n\n\n/**\n * @returns array of numbers in the square\n */\nfunction getNumbersInSquare(square: number){\n  const start = (Math.floor(square / 3) * 27) + (square % 3) * 3\n  return Array.from({length: 9}, (_, i) => i === 0\n   ? start\n   : start + Math.floor(i / 3) * 9 + (i % 3)\n  )\n}","import React, { useState } from 'react';\nimport { GlobalStyles } from 'styles';\nimport { Grid } from 'components';\nimport { getHighlighted } from 'lib';\n\ntype Props = {}\n\nexport interface Highlighted {\n  highlighted: boolean[]\n  setHighlighted: (index: number) => void\n}\n\ntype UseHighlight = [boolean[], (index: number) => void]\n\nfunction useHighlight(): UseHighlight {\n  const [highlighted, _setHighlighted] = useState<Array<boolean>>(new Array(81).fill(false))\n\n  function setHighlighted(index: number){\n    const set = getHighlighted(index)\n    _setHighlighted(highlighted.map((_, idx) => set.includes(idx) ? true : false))\n  }\n\n  return [\n    highlighted,\n    setHighlighted,\n  ]\n}\n\nexport const App: React.FC<Props> = () => {\n  const [data, ] = useState(new Array(81).fill(null))\n  const [highlighted, setHighlighted] = useHighlight()\n\n  return (\n    <>\n      <GlobalStyles/>\n      <h1>Sudoku</h1>\n      <Grid data={data} highlighted={highlighted} setHighlighted={setHighlighted}/>\n    </>\n  )\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport { CellWrapper } from \"styles\"\n\ntype Props = {\n  value: number\n  index: number\n  highlight: boolean\n  onHover: () => void \n}\n\nexport const Cell: React.FC<Props> = ({\n  value,\n  index,\n  highlight,\n  onHover,\n}) => {\n  const cellRef = useRef<HTMLDivElement>(null)\n  const [hEdge] = useState<boolean>((index + 1) % 3 === 0)\n  const [vEdge] = useState<boolean>((index + 1) % (9 * 3) === 0)\n\n  useEffect(() => {\n    const cell = cellRef.current\n    if(cell){\n      cell.addEventListener(\"mouseenter\", onHover)\n    }\n    return () => {\n      if(cell){\n        cell.addEventListener(\"mouseenter\", onHover)\n      }\n    }\n  }, [index, onHover])\n\n  return (\n    <CellWrapper\n      ref={cellRef}\n      horrizontalEdge={hEdge}\n      verticalEdge={vEdge}\n      highlight={highlight}\n    >\n      {index}\n    </CellWrapper>\n  )\n}","import { Cell, Highlighted } from \"components\"\nimport React from \"react\"\nimport {v4 as uuid} from 'uuid'\nimport { GridWrapper } from \"styles\"\n\n\ninterface Props extends Highlighted {\n  data: number[] // probs change number to a better data type\n}\n\nexport const Grid: React.FC<Props> = ({\n  data,\n  highlighted,\n  setHighlighted,\n}) => {  \n  return (\n    <GridWrapper>\n      {data.map((cell, idx) => \n        <Cell\n          index={idx}\n          value={cell}\n          key={uuid()}\n          onHover={() => setHighlighted(idx)}\n          highlight={highlighted[idx]}\n        />\n      )}\n    </GridWrapper>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from 'components';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
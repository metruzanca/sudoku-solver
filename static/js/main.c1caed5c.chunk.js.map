{"version":3,"sources":["styles/index.ts","lib/optimize.ts","lib/index.ts","contexts/index.tsx","components/App/App.tsx","components/Cell/Cell.tsx","components/Grid/Grid.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","GridWrapper","styled","div","CellWrapper","input","p","horrizontalEdge","css","verticalEdge","highlight","memoize","target","key","descriptor","original","value","_memoize","Sudoku","index","Math","floor","square","start","Array","from","length","_","i","column","row","board","defaultState","fill","setAtIndex","highlighted","setHighlighted","sudokuContext","createContext","Provider","BoardProvider","children","useState","_setBoard","console","log","data","updated","map","oldValue","idx","useBoard","_setHighlighted","set","col","getColumn","getRow","getSquare","Set","getNumbersInRow","forEach","item","add","getNumbersInColumn","getNumbersInSquare","values","getHighlighted","includes","useHighlight","App","Cell","onHover","cellRef","useRef","hEdge","vEdge","useContext","useEffect","cell","current","addEventListener","ref","onInput","e","parseInt","currentTarget","Grid","uuid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1caed5c.chunk.js","sourcesContent":["import styled, { createGlobalStyle, css } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  :root {\n    --bgColor1: #1C1E26;\n    --bgColor2: #3C4347;\n    --textColor: #90A4AE;\n    --highlight: #2b2d39;\n    --borders: #B4435C;\n    \n    background-color: var(--bgColor1);\n    color: var(--textColor);\n  }\n  #root {\n    display: grid;\n    place-items: center;\n  }\n`\n\nexport const GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(9, auto);\n  width: min-content;\n\n  padding-top: 1em;\n  padding-left: 1em;\n\n  // Temporary\n  border: 1px solid var(--borders);\n  border-radius: .4em;\n`\n\ninterface CellWrapperProps {\n  // For grid gaps in groups of 3s\n  horrizontalEdge: boolean\n  verticalEdge: boolean\n  // For hover on cells\n  highlight: boolean\n}\n\nexport const CellWrapper = styled.input<CellWrapperProps>`\n  height: 2em;\n  width: 2em;\n  background-color: var(--bgColor1);\n  color: var(--textColor);\n  text-align: center;\n\n  ${p => p.horrizontalEdge && css`\n    margin-right: 1em;\n  `}\n  ${p => p.verticalEdge && css`\n    margin-bottom: 1em;\n  `}\n\n  ${p => p.highlight && css`\n    background-color: var(--highlight);\n  `}\n\n  // Temporary\n  border: 1px solid var(--borders);\n\n  // Center number\n  display: grid;\n  place-items: center;\n`","import _memoize from 'fast-memoize'\n\nexport function memoize(){\n  return function (target: Object, key: string | symbol, descriptor: PropertyDescriptor){\n    const original = descriptor.value\n    descriptor.value = _memoize(original)\n    return descriptor\n  }\n}\n","import {memoize} from './optimize'\n\n\nexport function getHighlighted(index: number){\n  const col = Sudoku.getColumn(index)\n  const row = Sudoku.getRow(index)\n  const square = Sudoku.getSquare(index)\n  const set = new Set<number>()\n  Sudoku.getNumbersInRow(row)\n    .forEach(item => set.add(item))\n  Sudoku.getNumbersInColumn(col)\n    .forEach(item => set.add(item))\n  Sudoku.getNumbersInSquare(square)\n    .forEach(item => set.add(item))\n  return Array.from(set.values())\n}\n\nexport class Sudoku{\n  /**\n   * @returns 0 indexed row number\n   */\n  static getRow(index:number) {\n    return Math.floor((index) / 9)\n  }\n\n\n  /**\n   * @returns 0 indexed column number\n   */\n  static getColumn(index: number){\n    return (index % 9)\n  }\n\n\n  /**\n   * @returns 0 indexed square number\n   */\n  @memoize() static getSquare(index: number){\n    return Math.floor((index % 9) / 3) + 3 * Math.floor(index / (9 * 3))\n  }\n\n\n  /**\n   * @returns array of numbers in the row\n   */\n  @memoize() static getNumbersInSquare(square: number) {\n    const start = (Math.floor(square / 3) * 27) + (square % 3) * 3\n    return Array.from({length: 9}, (_, i) => \n      i === 0 ? start : start + Math.floor(i / 3) * 9 + (i % 3)\n    )\n  }\n\n\n  /**\n   * @returns array of numbers in the column\n   */ \n  @memoize() static getNumbersInColumn(column: number) {\n    return Array.from({length: 9}, (_, i) => column + i * 9)\n  }\n\n\n  /**\n   * @returns array of numbers in the square\n   */\n  @memoize() static getNumbersInRow(row: number) {\n    return Array.from({length: 9}, (_, i) => 9 * row + i)\n  }\n\n  //@memoize()\n  static valid(index: number, value: number, board: number[]) {\n\n  }\n}","import { getHighlighted } from \"lib\"\nimport React, { createContext, useState } from \"react\"\n\ntype SudokuGame =\n  & ReturnType<typeof useHighlight>\n  & ReturnType<typeof useBoard>\n\nconst defaultState: SudokuGame = {\n  board: new Array(81).fill(0),\n  setAtIndex: () => {},\n  highlighted: new Array(81).fill(false),\n  setHighlighted: () => {},\n}\n\nexport const sudokuContext = createContext<SudokuGame>(defaultState)\n\nconst Provider = sudokuContext.Provider\n\nexport const BoardProvider: React.FC = ({\n  children\n}) => {\n  const {board, setAtIndex} = useBoard()\n  const {highlighted, setHighlighted} = useHighlight()\n\n  return (\n    <Provider value={{\n      board,\n      setAtIndex,\n\n      highlighted,\n      setHighlighted,\n    }}>\n      {children}\n    </Provider>\n  )\n}\n\n\nfunction useHighlight() {\n  const [highlighted, _setHighlighted] = useState<Array<boolean>>(new Array(81).fill(false))\n\n  function setHighlighted(index: number){\n    const set = getHighlighted(index)\n    _setHighlighted(highlighted.map((_, idx) => set.includes(idx) ? true : false))\n  }\n\n  return {\n    highlighted,\n    setHighlighted,\n  }\n}\n\nfunction useBoard(){\n  const [board, _setBoard] = useState<number[]>(new Array(81).fill(0))\n\n  function setAtIndex(index: number, value: number){\n    console.log(index, value);\n    \n    _setBoard(data => {\n      const updated = data.map((oldValue, idx) => idx === index ? value : oldValue)\n      console.log(updated);\n      return updated\n      \n    })\n  }\n\n  return {\n    board,\n    setAtIndex,\n  }\n}","import React from 'react';\nimport { GlobalStyles } from 'styles';\nimport { Grid } from 'components';\nimport { BoardProvider } from 'contexts';\n\ntype Props = {}\n\nexport const App: React.FC<Props> = () => {\n\n  return (\n    <>\n      <GlobalStyles/>\n      <h1>Sudoku</h1>\n      <BoardProvider>\n        <Grid/>\n      </BoardProvider>\n    </>\n  )\n}","import { sudokuContext } from \"contexts\"\nimport React, { useContext, useEffect, useRef, useState } from \"react\"\nimport { CellWrapper } from \"styles\"\n\ntype Props = {\n  value: number\n  index: number\n  highlight: boolean\n  onHover: () => void \n}\n\nexport const Cell: React.FC<Props> = ({\n  value,\n  index,\n  highlight,\n  onHover,\n}) => {\n  const cellRef = useRef<HTMLInputElement>(null)\n  const [hEdge] = useState<boolean>((index + 1) % 3 === 0)\n  const [vEdge] = useState<boolean>((index + 1) % (9 * 3) === 0)\n  const {setAtIndex} = useContext(sudokuContext)\n\n  useEffect(() => {\n    const cell = cellRef.current\n    if(cell){\n      cell.addEventListener(\"mouseenter\", onHover)\n    }\n    return () => {\n      if(cell){\n        cell.addEventListener(\"mouseenter\", onHover)\n      }\n    }\n  }, [index, onHover])\n\n\n  const handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = parseInt(e.currentTarget.value)\n    console.log(\"changing to \" + value);\n    \n    setAtIndex(index, value)\n  }\n  return (\n    <CellWrapper\n      ref={cellRef}\n      horrizontalEdge={hEdge}\n      verticalEdge={vEdge}\n      highlight={highlight}\n      value={value}\n      onInput={handleInput}\n    />\n  )\n}","import { Cell } from \"components\"\nimport React, { useContext } from \"react\"\nimport {v4 as uuid} from 'uuid'\nimport { GridWrapper } from \"styles\"\nimport { sudokuContext } from \"contexts\"\n\n\ninterface Props {}\n\nexport const Grid: React.FC<Props> = () => {\n  const {\n    board,\n    highlighted,\n    setHighlighted,\n  } = useContext(sudokuContext)\n  return (\n    <GridWrapper>\n      {board.map((cell, idx) => \n        <Cell\n          index={idx}\n          value={cell}\n          key={uuid()}\n          onHover={() => setHighlighted(idx)}\n          highlight={highlighted[idx]}\n        />\n      )}\n    </GridWrapper>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from 'components';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
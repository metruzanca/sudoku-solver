{"version":3,"sources":["lib/errors.ts","styles/index.ts","lib/optimize.ts","lib/index.ts","contexts/index.tsx","components/App/App.tsx","components/Cell/Cell.tsx","components/Grid/Grid.tsx","index.tsx"],"names":["SudokuErrorTypes","GlobalStyles","createGlobalStyle","GridWrapper","styled","div","CellWrapper","input","p","horrizontalEdge","css","verticalEdge","highlight","editable","SudokuError","error","collisionIndex","type","Invalid_Column","Invalid_Row","Invalid_Square","errorData","Error","memoize","target","key","descriptor","original","value","_memoize","Sudoku","index","Math","floor","square","start","Array","from","length","_","i","column","row","SUDOKU_N","board","errors","getRow","rowIndexes","getNumbersInRow","idx","push","col","getColumn","colIndexes","getNumbersInColumn","getSquare","squareIndexes","getNumbersInSquare","defaultState","fill","setAtIndex","highlighted","setHighlighted","sudokuContext","createContext","Provider","BoardProvider","children","initialValue","useState","valueArray","split","testBoard","map","cell","parseInt","initBoard","_setBoard","history","useHistory","validNumber","hasErrors","data","oldValue","console","log","useEffect","toString","cb","find","useWin","alert","useBoard","useLocation","pathname","substr","_setHighlighted","set","Set","forEach","item","add","values","getHighlighted","includes","useHighlight","App","Cell","onHover","cellRef","useRef","hEdge","vEdge","useContext","handleFocus","current","select","addEventListener","ref","inputMode","onInput","e","currentTarget","Grid","uuid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38e1ef56.chunk.js","sourcesContent":["export enum SudokuErrorTypes {\n  Invalid_Row,\n  Invalid_Column,\n  Invalid_Square,\n}\n\ntype InvalidArea = {\n  type: \n  | SudokuErrorTypes.Invalid_Row \n  | SudokuErrorTypes.Invalid_Column \n  | SudokuErrorTypes.Invalid_Square \n  errorData: {\n    collisionIndex:number\n  }\n}\n\ntype ErrorTypes =| InvalidArea\n\n\nexport class SudokuError extends Error {\n  collisionIndex?:number\n  type: SudokuErrorTypes\n  \n  constructor(error: ErrorTypes){\n    super(\"Sudoku Error\")\n    this.type = error.type\n  \n    switch(error.type){\n      case SudokuErrorTypes.Invalid_Column:\n      case SudokuErrorTypes.Invalid_Row:\n      case SudokuErrorTypes.Invalid_Square:\n      {\n        this.collisionIndex = error.errorData.collisionIndex\n        break;\n      }\n      default: break;\n    }\n  }\n\n}","import styled, { createGlobalStyle, css } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  :root {\n    --bgColor1: #1C1E26;\n    --bgColor2: #3C4347;\n    --textColor: #90A4AE;\n    --textColor2: #9569BE;\n    --highlight: #2b2d39;\n    --borders: #B4435C;\n    \n    background-color: var(--bgColor1);\n    color: var(--textColor);\n  }\n  #root {\n    display: grid;\n    place-items: center;\n    font-family: sans-serif;\n  }\n`\n\nexport const GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(9, auto);\n  width: min-content;\n\n  padding-top: 1em;\n  padding-left: 1em;\n\n  // Temporary\n  border: 1px solid var(--borders);\n  border-radius: .4em;\n`\n\ninterface CellWrapperProps {\n  // For grid gaps in groups of 3s\n  horrizontalEdge: boolean\n  verticalEdge: boolean\n  // For hover on cells\n  highlight: boolean\n  editable: boolean\n}\n\nexport const CellWrapper = styled.input<CellWrapperProps>`\n  height: 2em;\n  width: 2em;\n  background-color: var(--bgColor1);\n  color: var(--textColor);\n  text-align: center;\n\n  ${p => p.horrizontalEdge && css`\n    margin-right: 1em;\n  `}\n  ${p => p.verticalEdge && css`\n    margin-bottom: 1em;\n  `}\n\n  ${p => p.highlight && css`\n    background-color: var(--highlight);\n  `}\n\n  ${p => !p.editable && css`\n    color: var(--textColor2);\n  `}\n\n  // Temporary\n  border: 1px solid var(--borders);\n\n  // Center number\n  display: grid;\n  place-items: center;\n`","import _memoize from 'fast-memoize'\n\nexport function memoize(){\n  return function (target: Object, key: string | symbol, descriptor: PropertyDescriptor){\n    const original = descriptor.value\n    descriptor.value = _memoize(original)\n    return descriptor\n  }\n}\n","import { SudokuError, SudokuErrorTypes } from './errors'\nimport {memoize} from './optimize'\n\n\nexport function getHighlighted(index: number){\n  const col = Sudoku.getColumn(index)\n  const row = Sudoku.getRow(index)\n\n  const square = Sudoku.getSquare(index)\n  const set = new Set<number>()\n  Sudoku.getNumbersInRow(row)\n    .forEach(item => set.add(item))\n  Sudoku.getNumbersInColumn(col)\n    .forEach(item => set.add(item))\n  Sudoku.getNumbersInSquare(square)\n    .forEach(item => set.add(item))\n  return Array.from(set.values())\n}\n\nexport interface Cell {\n  value: number\n  editable: boolean\n}\n\nexport class Sudoku{\n  // TODO reuse this elsewhere so that this can be made an NxN sudoku\n  // any occurance of 9 would need to be N^2 and 27 N^3\n  static SUDOKU_N = 3\n\n  /**\n   * @returns 0 indexed row number\n   */\n  static getRow(index:number) {\n    return Math.floor((index) / 9)\n  }\n\n\n  /**\n   * @returns 0 indexed column number\n   */\n  static getColumn(index: number){\n    return (index % 9)\n  }\n\n\n  /**\n   * @returns 0 indexed square number\n   */\n  @memoize() static getSquare(index: number){\n    return Math.floor((index % 9) / 3) + 3 * Math.floor(index / (9 * 3))\n  }\n\n  /**\n   * @returns array of numbers in the row\n   */\n  @memoize() static getNumbersInSquare(square: number) {\n    const start = (Math.floor(square / 3) * 27) + (square % 3) * 3\n    return Array.from({length: 9}, (_, i) => \n      i === 0 ? start : start + Math.floor(i / 3) * 9 + (i % 3)\n    )\n  }\n\n\n  /**\n   * @returns array of numbers in the column\n   */ \n  @memoize() static getNumbersInColumn(column: number) {\n    return Array.from({length: 9}, (_, i) => column + i * 9)\n  }\n\n\n  /**\n   * @returns array of numbers in the square\n   */\n  @memoize() static getNumbersInRow(row: number) {\n    return Array.from({length: 9}, (_, i) => 9 * row + i)\n  }\n\n  static validNumber(value: number) {\n    return value > 0 && value <= Sudoku.SUDOKU_N**2\n  }\n\n  static hasErrors(index: number, value: number, board: Cell[]) {\n    const errors:SudokuError[] = []\n    const row = Sudoku.getRow(index)\n    const rowIndexes = Sudoku.getNumbersInRow(row)\n    for (const idx of rowIndexes) {\n      if(idx !== index && board[idx].value === value){\n        errors.push(new SudokuError({\n          type: SudokuErrorTypes.Invalid_Row,\n          errorData: {collisionIndex: idx}\n        }))\n        break  \n      }\n    }\n\n    const col = Sudoku.getColumn(index)\n    const colIndexes = Sudoku.getNumbersInColumn(col)\n    for (const idx of colIndexes) {\n      if(idx !== index && board[idx].value === value){\n        errors.push(new SudokuError({\n          type: SudokuErrorTypes.Invalid_Column,\n          errorData: {collisionIndex: idx}\n        }))\n        break\n      }\n    }\n\n    const square = Sudoku.getSquare(index)\n    const squareIndexes = Sudoku.getNumbersInSquare(square)\n    for (const idx of squareIndexes) {\n      if(idx !== index && board[idx].value === value){\n        errors.push(new SudokuError({\n          type: SudokuErrorTypes.Invalid_Square,\n          errorData: {collisionIndex: idx}\n        }))\n        break\n      }\n    }\n\n    return errors\n  }\n}","import React, { createContext, useEffect, useState } from \"react\"\nimport { useHistory, useLocation } from \"react-router\"\nimport { Cell, getHighlighted, Sudoku } from \"lib\"\n\ntype SudokuGame =\n  & ReturnType<typeof useHighlight>\n  & ReturnType<typeof useBoard>\n\nconst defaultState: SudokuGame = {\n  board: new Array(81).fill(0),\n  setAtIndex: () => {},\n  highlighted: new Array(81).fill(false),\n  setHighlighted: () => {},\n}\n\nexport const sudokuContext = createContext<SudokuGame>(defaultState)\n\nconst Provider = sudokuContext.Provider\n\nexport const BoardProvider: React.FC = ({\n  children\n}) => {\n  const pathname = useLocation().pathname.substr(1)  \n  const {board, setAtIndex} = useBoard(pathname)\n  const {highlighted, setHighlighted} = useHighlight()\n\n  return (\n    <Provider value={{\n      board,\n      setAtIndex,\n\n      highlighted,\n      setHighlighted,\n    }}>\n      {children}\n    </Provider>\n  )\n}\n\n// TODO replace the boolean[] in the useHighlight\n// interface HighlightedCell {\n//   affected: boolean   // for hover visualization\n//   collision: boolean  // for errors when user inserts invalid value\n// }\n\nfunction useHighlight() {\n  const [highlighted, _setHighlighted] = useState<Array<boolean>>(new Array(81).fill(false))\n\n  function setHighlighted(index: number){\n    const set = getHighlighted(index)\n    _setHighlighted(highlighted.map((_, idx) => set.includes(idx) ? true : false))\n  }\n\n  return {\n    highlighted,\n    setHighlighted,\n  }\n}\n\nconst testBoard = [\"3\",\"0\",\"0\",\"5\",\"0\",\"8\",\"4\",\"0\",\"0\",\"5\",\"2\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"8\",\"0\",\"0\",\"0\",\"0\",\"0\",\"3\",\"1\",\"0\",\"0\",\"3\",\"0\",\"1\",\"0\",\"0\",\"8\",\"0\",\"9\",\"0\",\"0\",\"8\",\"6\",\"3\",\"0\",\"0\",\"5\",\"0\",\"5\",\"0\",\"0\",\"9\",\"0\",\"6\",\"0\",\"0\",\"1\",\"3\",\"0\",\"0\",\"0\",\"0\",\"2\",\"5\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"7\",\"4\",\"0\",\"0\",\"5\",\"2\",\"0\",\"6\",\"3\",\"0\",\"0\"]\n\nfunction initBoard(initialValue: string){\n  const valueArray = initialValue.split(',')\n  const board = valueArray.length < Sudoku.SUDOKU_N**4\n  // ? new Array(81).fill(0)\n  ? testBoard\n  : valueArray\n\n  return board.map<Cell>(cell => {\n    const value = parseInt(cell)\n    return {\n      value,\n      editable: value === 0 ? true : false,\n    }\n  })\n}\n\ntype Board = Cell[]\n\nfunction useBoard(initialValue: string){\n  const [board, _setBoard] = useState<Board>(initBoard(initialValue))\n\n  const history = useHistory()\n  useEffect(() => {\n    // TODO Move this to an \"export\" button\n    history.push(board.map(cell => cell.value).toString())\n  },[board, history])\n\n  useWin(board, () => {\n    alert(\"Yay, you've won!\");\n  })\n  \n  function setAtIndex(index: number, value: number){\n    if(!Sudoku.validNumber(value)){\n      console.log(\"notvalid\");\n      \n      return\n    }\n    const errors = Sudoku.hasErrors(index, value, board)\n    if(!errors.length){\n      _setBoard(data => data.map((oldValue, idx) => idx === index ? {editable: true, value} : oldValue))\n      return\n    }\n    // TODO handle errors via highlighted.collision\n  }\n\n  return {\n    board,\n    setAtIndex,\n  }\n}\n\nfunction useWin(board: Board, cb: (win: boolean) => void){\n  useEffect(() => {\n    if(!board.find(cell => cell.value === 0)) {\n      cb(true)\n    }\n  },[board, cb])\n}","import React from 'react';\nimport { GlobalStyles } from 'styles';\nimport { Grid } from 'components';\nimport { BoardProvider } from 'contexts';\nimport {HashRouter} from 'react-router-dom'\n\ntype Props = {}\n\nexport const App: React.FC<Props> = () => {\n\n  return (\n    <HashRouter>\n      <GlobalStyles/>\n      <h1>Sudoku</h1>\n      <BoardProvider>\n        <Grid/>\n      </BoardProvider>\n    </HashRouter>\n  )\n}","import { sudokuContext } from \"contexts\"\nimport { Cell as CellType } from \"lib\"\nimport React, { useContext, useEffect, useRef, useState } from \"react\"\nimport { CellWrapper } from \"styles\"\n\ntype Props = {\n  cell: CellType\n  index: number\n  highlight: boolean\n  onHover: () => void \n}\n\nexport const Cell: React.FC<Props> = ({\n  cell,\n  index,\n  highlight,\n  onHover,\n}) => {\n  const cellRef = useRef<HTMLInputElement>(null)\n  const [hEdge] = useState<boolean>((index + 1) % 3 === 0)\n  const [vEdge] = useState<boolean>((index + 1) % (9 * 3) === 0)\n  const {setAtIndex} = useContext(sudokuContext)\n\n  function handleFocus() {\n    cellRef.current?.select()\n  }\n\n  useEffect(() => {\n    const cell = cellRef.current\n    cell?.addEventListener(\"mouseenter\", onHover)\n    cell?.addEventListener(\"focus\", handleFocus)\n    // return () => {\n    //   cell?.removeEventListener(\"mouseenter\", onHover)\n    //   cell?.removeEventListener(\"focus\", handleFocus)\n    // }\n  }, [index, onHover])\n\n\n  const handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    if(!cell.editable) {\n      console.log(\"not editable\");\n      \n      return\n    }\n    const value = parseInt(e.currentTarget.value)\n    setAtIndex(index, value)\n  }\n  return (\n    <CellWrapper\n      ref={cellRef}\n      inputMode=\"numeric\"\n      horrizontalEdge={hEdge}\n      verticalEdge={vEdge}\n      editable={cell.editable}\n      highlight={highlight}\n      value={cell.value === 0 ? \"\" : cell.value}\n      onInput={handleInput}\n    />\n  )\n}","import { Cell } from \"components\"\nimport React, { useContext } from \"react\"\nimport {v4 as uuid} from 'uuid'\nimport { GridWrapper } from \"styles\"\nimport { sudokuContext } from \"contexts\"\n\n\ninterface Props {}\n\nexport const Grid: React.FC<Props> = () => {\n  const {\n    board,\n    highlighted,\n    setHighlighted,\n  } = useContext(sudokuContext)\n  return (\n    <GridWrapper>\n      {board.map((cell, idx) => \n        <Cell\n          index={idx}\n          cell={cell}\n          key={uuid()}\n          onHover={() => setHighlighted(idx)}\n          highlight={highlighted[idx]}\n        />\n      )}\n    </GridWrapper>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from 'components';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}